import os
import subprocess
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def run_cuda_program(input_file, directions_file, output_dir):
    """ Run the CUDA program with specified inputs and output directory. """
    cuda_executable = './build/RadioImager'
    args = [
        cuda_executable,
        f'--input={input_file}',
        f'--directions={directions_file}',
        '--use_predefined_params=true',
        '--output_uvw=false',
        f'--uvw_dir={output_dir}/uvw_coordinates',
        f'--image_dir={output_dir}/images_gpu'
    ]
    subprocess.run(args, check=True)

def run_python_script(input_file, directions_file, output_dir):
    """ Run the Python script with specified inputs and output directory. """
    python_script = 'python/imaging_cpu.py'
    args = [
        'python3', python_script,
        f'--input={input_file}',
        f'--directions={directions_file}',
        '--use_predefined_params=true',
        '--save_uvw=false',
        f'--image_dir={output_dir}/images',
        '--save_as_csv=true'
    ]
    subprocess.run(args, check=True)

def plot_images(image_dir, num_images, prefix):
    """ Plot and save images from CSV files in the specified directory. """
    for i in range(num_images):
        image = np.loadtxt(f'{image_dir}/{prefix}{i}.csv', delimiter=',')
        plt.figure()
        plt.imshow(image, cmap='gray', vmin=0.0, vmax=1.0)
        plt.colorbar()
        plt.title(f'{prefix} Image {i}')
        plt.savefig(f'{image_dir}/{prefix}{i}.png')
        plt.close()
        
        print(f'{prefix} Image {i} saved as PNG.')

def compare_images(cuda_dir, python_dir, diff_dir, num_images):
    """ Compare images generated by CUDA and Python implementations and save the differences as PNG files. """
    os.makedirs(diff_dir, exist_ok=True)
    
    for i in range(num_images):
        cuda_image = np.loadtxt(f'{cuda_dir}/image_data_gpu_{i}.csv', delimiter=',')
        python_image = np.loadtxt(f'{python_dir}/image_{i}.csv', delimiter=',')
        
        difference_image = np.abs(cuda_image - python_image)
        max_difference = np.max(difference_image)
        
        plt.figure()
        plt.imshow(difference_image, cmap='hot', interpolation='nearest')
        plt.colorbar()
        plt.title(f'Difference Image {i}')
        plt.savefig(f'{diff_dir}/difference_image_{i}.png')
        plt.close()
        
        print(f'Difference Image {i} saved. Max difference: {max_difference}')
        if max_difference < 0.05:
            print(f'Image {i} is similar.')
        else:
            print(f'Image {i} is not similar.')

def main():
    data_dir = 'tests/data'
    cuda_output_dir = 'tests/output/cuda'
    python_output_dir = 'tests/output/python'
    diff_output_dir = 'tests/output/differences'
    
    input_file = f'{data_dir}/xyz_coordinates.csv'
    directions_file = f'{data_dir}/directions.csv'

    # Run CUDA program and plot CUDA images
    run_cuda_program(input_file, directions_file, cuda_output_dir)
    plot_images(f'{cuda_output_dir}/images_gpu', 10, 'image_data_gpu_')  # Adjust the number of images as needed

    # Optionally run Python program and compare images
    run_python_script(input_file, directions_file, python_output_dir)
    compare_images(f'{cuda_output_dir}/images_gpu', f'{python_output_dir}/images', diff_output_dir, 10)  # Adjust the number of images as needed

if __name__ == '__main__':
    main()
